class Solution {
        private:

    bool isSafe(int row,int col,vector<vector<char>> &board,char val){
        //char c = val;
        for(int i =0;i<9;++i){
            if(board[row][i] == val || board[i][col] == val){
                return false;
            }
            if(board[3*(row/3)+i/3][3*(col/3)+i%3] == val){
                return false;
            }
        }
        return true;
        
    }
    
        bool solve(vector<vector<char>> &board){
            for(int i =0;i<9;++i){
                for(int j =0;j<9;++j){
                    //if cell is empty 
                    if(board[i][j] == '.'){
                        //then check for all the value
                        for(int val='1';val<='9';++val){
                            if(isSafe(i,j,board,val)){
                                //char c = val;
                                board[i][j] = val;
                                
                                if(solve(board)){
                                    return true;
                                }
                                else{
                                    //backtrack
                                    board[i][j] = '.';    
                                }
                            }
                        }return false;
                    }
                    
                }
            }
            return true;
        }

public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};
